{
	"info": {
		"_postman_id": "780fb2e6-a129-4679-9dd5-783c5b13fdaf",
		"name": "HW Postman 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let varData = pm.response.json();",
							"pm.environment.set('token', varData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Kris",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1101",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"person\": {",
							"             \"type\": \"object\" ,",
							"             \"properties\" : {",
							"                 \"u_age\" : {\"type\" : \"number\"},",
							"                 \"u_name\" : {\"type\" :\"array\"},",
							"                 \"u_salary_1_5_year\" : {\"type\" : \"number\"}",
							"             }",
							"             },",
							"        \"qa_salary_after_12_months\" : {\"type\" : \"number\"},",
							"        \"qa_salary_after_6_months\" : {\"type\" : \"number\"},",
							"        \"start_qa_salary\" : {\"type\" : \"number\"}",
							"        }",
							"};",
							"",
							"",
							"pm.test(\"Validate schema\", () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"",
							"const reqData = JSON.parse(request.data);",
							"const salary = reqData.salary",
							"const jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"check qa_salary_after_6_months\", function () { ",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*2);",
							"});",
							"pm.test(\"check qa_salary_after_12_months\", function () { ",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary*2.9);",
							"});",
							"pm.test(\"check u_salary_1_5_year\", function () { ",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary*4);",
							"});",
							"",
							"const auth_token = String(pm.environment.get(\"token\"));",
							"",
							"const postRequest = {",
							"  url: pm.environment.get(\"url\") + '/get_test_user',",
							"  method: 'POST',",
							"  header: {",
							"    'Content-Type': 'multipart/form-data',",
							"    },",
							"  body: {",
							"    mode: 'formdata',",
							"    formdata: [",
							"            {",
							"                key: \"name\",",
							"                value: \"Hulio\",",
							"            },",
							"            {",
							"                key: \"auth_token\",",
							"                value: auth_token,",
							"            },",
							"            {",
							"                key: \"age\",",
							"                value: 43,",
							"            },",
							"            {",
							"                key: \"salary\",",
							"                value: salary,",
							"            },",
							"",
							"        ]",
							"  }",
							"};",
							"pm.sendRequest(postRequest, (error, response) => {",
							"  console.log(error ? error : response.json());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "auth_token",
						"value": "{{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\" : 29,\n    \"salary\" : 457,\n    \"name\" : \"Kris\",\n    \"auth_token\" : \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const schema = {",
							"    \"type\" :\"object\",",
							"    \"properties\" : {",
							"        \"age\":{\"type\":\"number\"},",
							"        \"name\":{\"type\":\"string\"},",
							"        \"salary\":{\"type\":\"array\"}",
							"    }",
							"};",
							"",
							"",
							"pm.test(\"Validate schema\", () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"",
							"const reqData = request.data;",
							"const salary = reqData.salary",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"check salary*2\", function () { ",
							"    pm.expect(Number.parseInt(jsonData.salary[1])).to.eql(salary*2)",
							"});",
							"",
							"pm.test(\"check salary*3\", function () { ",
							"    pm.expect(Number.parseInt(jsonData.salary[2])).to.eql(salary*3)",
							"});",
							"",
							"pm.test(\"check compain 2nd element to 1st element in array\", function () { ",
							"    pm.expect(Number.parseInt(jsonData.salary[2])).to.be.greaterThan(Number.parseInt(jsonData.salary[1]))",
							"});",
							"",
							"pm.test(\"check compain 2nd element to 0 element in array\", function () { ",
							"    pm.expect(Number.parseInt(jsonData.salary[2])).to.be.greaterThan(Number.parseInt(jsonData.salary[0]))",
							"});",
							"",
							"console.log(typeof(jsonData.salary[2]))",
							"console.log(typeof(Number(jsonData.salary[2])))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "98",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "123",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Bob",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const schema = {",
							"    \"type\" :\"object\",",
							"    \"properties\" : {",
							"        \"age\":{\"type\":\"number\"},",
							"        \"daily_sleep\":{\"type\": \"number\"},",
							"        \"name\":{\"type\":\"string\"}",
							"    }",
							"};",
							"",
							"pm.test(\"Validate schema\", () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"const reqData = request.data;",
							"const weight = reqData.weight",
							"const respData = pm.response.json();",
							"",
							"pm.test(\"weight*0.012\", () => { ",
							"    pm.expect(respData.daily_food).to.eql(weight*0.012)",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "2",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Zefir",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\":{",
							"            \"age\": {\"type\":\"string\"},",
							"            \"family\" :{",
							"                \"type\":\"object\",",
							"                \"properties\": {",
							"                    \"children\":{\"type\": \"array\"}},",
							"                    \"u_salary_1_5_year\": {\"type\":\"number\"}",
							"            },",
							"            \"name\": {\"type\":\"string\"},",
							"            \"salary\":{\"type\":\"number\"}",
							"    }",
							"};",
							"",
							"pm.test(\"Validate schema\", () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"const respData = pm.response.json();",
							"",
							"pm.test(\"compare name from response with name from environment\", function () {",
							"    pm.expect(respData.name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"",
							"const reqData = request.data;",
							"const age = reqData.age",
							"pm.test(\"age from request=age from response\", () => { ",
							"    pm.expect(respData.age).to.eql(age)",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "48",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1300",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}